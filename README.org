#+TITLE: My DWM configurations file
#+PROPERTY: header-args :tangle config.h :main no

* Intro
This is my DWM build I use every day.
I'm too lazy to write any more.

* Window border thickness
Thickness of window border in pixels. Value of 0 would disable the border. Border will not show no matter the value if only 1 window is present on screen, unless the layout is floating.

#+BEGIN_SRC C
static const unsigned int borderpx  = 2;
#+END_SRC

* Gaps between windows
The padding around windows. Keep in mind that you can still change the gaps with a keybinding.

#+BEGIN_SRC C :padline no
static const unsigned int gappx     = 0;
#+END_SRC

* Window edge snap
Determines how many pixels away should window be from the edge of the screen to stick it onto the edge of the screen.

#+BEGIN_SRC C :padline no
static const unsigned int snap      = 32;
#+END_SRC

* Show status bar
Determines wether the status bar is shown when launching DWM.
This option only decides if it's showing *by default*, which means you can toggle it on/off with keybinding if you want.

#+BEGIN_SRC C :padline no
static const int showbar            = 0;
#+END_SRC

* Top/Bottom status bar
Determines wether status bar is shown on top or bottom of the screen.

#+BEGIN_SRC C :padline no
static const int topbar             = 1;
#+END_SRC

* Fonts
Determines what fonts should it use for status bar. It uses XFT so it will use backup fonts when your desired font wasn't found, also it makes possible to use emojis and unicode icons instead of normal text.

#+BEGIN_SRC C :padline no
static const char *fonts[]          = { "LiberationMono:size=10" };
#+END_SRC

* Colors
Setting colors for normal state of UI elements and selected state.
Colors are stored in constants so that only they can be changed to change to desired color shceme.

#+BEGIN_SRC C
static const char black[]           = "#282C34";
static const char lighter_black[]   = "#646E82";
static const char gray[]            = "#ABB2BF";
static const char blue[]            = "#61AFEF";
static const char red[]             = "#E06C75";
static const char purple[]          = "#C678DD";
static const char green[]           = "#98C379";
static const char yellow[]          = "#E5C07B";
static const char cyan[]            = "#56B6C2";
static const char white[]           = "#F0F2F4";

static const char *colors[][3]      = {
	/*                 fg     bg      border   */
	[SchemeNorm]   = { gray,  black,  lighter_black },
	[SchemeSel]    = { white, red,    red           },
};
#+END_SRC

* Transparency
Setting transparency for UI elements.
Alpha for windows border and status bar are stored in constants.
Max value of alpha is 255; OPAQUE is a constant that is equal to 0.
NOTE: It will only work if you have a compositor working, otherwise will always be opaque.

#+BEGIN_SRC C
static const unsigned int baralpha = 150;
static const unsigned int borderalpha = OPAQUE;

static const unsigned int alphas[][3]      = {
	/*               fg      bg        border     */
	[SchemeNorm] = { OPAQUE, baralpha, baralpha },
	[SchemeSel]  = { OPAQUE, baralpha, baralpha },
};
#+END_SRC

* Tags/Workspaces
In DWM, there are no workspaces but tags; it's kinda the same except you can have the same window on 2 different tags or to have windows from 2 different tags on one screen.
You can put any string (be that some kind of text, number or even a unicode icon) in between quotes and DWM will put the contents of those strings and put them inside the tag buttons.
This is what I have:

#+BEGIN_SRC C
static const char *tags[] = { "  ", "  ", "  ", "  " };
#+END_SRC

Here's an example with enumerated tags:

#+BEGIN_SRC C :tangle no
static const char *tags[] = { "1", "2", "3", "4" };
#+END_SRC

Here's another example with normal text:

#+BEGIN_SRC C :tangle no
static const char *tags[] = { "Main", "Browser", "Images", "Videos" };
#+END_SRC

* Rules
Determining rules for certain windows.

#+BEGIN_SRC C
static const Rule rules[] = {
	/* class         instance    title       tags mask     isfloating   monitor */
	{ "st-256color", NULL,       NULL,       1,            0,           -1 },
	{ "Emacs",       NULL,       NULL,       1,            0,           -1 },
	{ "Firefox",     NULL,       NULL,       2,            0,           -1 },
	{ "Gimp",        NULL,       NULL,       4,            0,           -1 },
	{ "Sxiv",        NULL,       NULL,       4,            0,           -1 },
	{ "Parole",      NULL,       NULL,       8,            0,           -1 },
	{ "MPlayer",     NULL,       NULL,       8,            0,           -1 },
};
#+END_SRC

* Layouts
In my fork I have 6 layouts in total (3 of them are added by patches).
You can change the string that would show up on certain layout to your preference.

#+BEGIN_SRC C
static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },
	{ "><>",      NULL },
	{ "[M]",      monocle },
	{ "|M|",      centeredmaster },
	{ ">M>",      centeredfloatingmaster },
	{ "###",      gaplessgrid },
};
#+END_SRC

* Layouts' window behaviour
Those three options determine windows behaviour in all the layouts (except floating and grid).

The explanation of every option:

Decides how much space the master area will take up by default (can be changed with keybindings).
The value can arrange from 0.05 to 0.95

#+BEGIN_SRC C :padline yes
static const float mfact     = 0.55;
#+END_SRC

Decides how many clients will be in master area.

#+BEGIN_SRC C :padline no
static const int nmaster     = 1;
#+END_SRC

Some windows (like terminals) can talk to DWM and tell it what window size would be good in the window's opinion to guarantee the best user experience. It's good for floating windows but it's really annoying for tiling layouts, so I turned it off.

#+BEGIN_SRC C :padline no
static const int resizehints = 0;
#+END_SRC

* Keybindings
Here are determined keybindings; You might want to change those to your liking.
NOTE: Mod4Mask is Win key, change it to Mod2Mask to get Alt key instead.

#+BEGIN_SRC C
/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

static Key keys[] = {
	/* modifier                           key        function        argument */
	{ MODKEY,                             XK_b,      togglebar,      {0} },
	{ MODKEY,                             XK_n,      focusstack,     {.i = +1 } },
	{ MODKEY,                             XK_p,      focusstack,     {.i = -1 } },
	{ MODKEY,                             XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                             XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                             XK_q,      setmfact,       {.f = -0.05} },
	{ MODKEY,                             XK_e,      setmfact,       {.f = +0.05} },
	{ MODKEY,                             XK_Return, zoom,           {0} },
	{ MODKEY,                             XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,                   XK_c,      killclient,     {0} },
	{ MODKEY,                             XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                             XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                             XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                             XK_u,      setlayout,      {.v = &layouts[3]} },
	{ MODKEY,                             XK_o,      setlayout,      {.v = &layouts[4]} },
	{ MODKEY,                             XK_g,      setlayout,      {.v = &layouts[5] } },
	{ MODKEY|ShiftMask,                   XK_f,      togglefullscr,  {0} },
	{ MODKEY,                             XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,                   XK_space,  togglefloating, {0} },
	{ MODKEY,                             XK_j,      moveresize,     {.v = "0x 50y 0w 0h" } },
	{ MODKEY,                             XK_k,      moveresize,     {.v = "0x -50y 0w 0h" } },
	{ MODKEY,                             XK_l,      moveresize,     {.v = "50x 0y 0w 0h" } },
	{ MODKEY,                             XK_h,      moveresize,     {.v = "-50x 0y 0w 0h" } },
	{ MODKEY|ShiftMask,                   XK_j,      moveresize,     {.v = "0x 0y 0w 50h" } },
	{ MODKEY|ShiftMask,                   XK_k,      moveresize,     {.v = "0x 0y 0w -50h" } },
	{ MODKEY|ShiftMask,                   XK_l,      moveresize,     {.v = "0x 0y 50w 0h" } },
	{ MODKEY|ShiftMask,                   XK_h,      moveresize,     {.v = "0x 0y -50w 0h" } },
	{ MODKEY|ControlMask,                 XK_k,      moveresizeedge, {.v = "t"} },
	{ MODKEY|ControlMask,                 XK_j,      moveresizeedge, {.v = "b"} },
	{ MODKEY|ControlMask,                 XK_h,      moveresizeedge, {.v = "l"} },
	{ MODKEY|ControlMask,                 XK_l,      moveresizeedge, {.v = "r"} },
	{ MODKEY|ControlMask|ShiftMask,       XK_k,      moveresizeedge, {.v = "T"} },
	{ MODKEY|ControlMask|ShiftMask,       XK_j,      moveresizeedge, {.v = "B"} },
	{ MODKEY|ControlMask|ShiftMask,       XK_h,      moveresizeedge, {.v = "L"} },
	{ MODKEY|ControlMask|ShiftMask,       XK_l,      moveresizeedge, {.v = "R"} },
	{ MODKEY,                             XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,                   XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                             XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                             XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,                   XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,                   XK_period, tagmon,         {.i = +1 } },
	{ MODKEY,                             XK_minus,  setgaps,        {.i = -4 } },
	{ MODKEY,                             XK_equal,  setgaps,        {.i = +4 } },
	{ MODKEY|ShiftMask,                   XK_equal,  setgaps,        {.i = 0  } },
	{ MODKEY|ShiftMask,                   XK_q,      quit,           {0} },
	TAGKEYS( XK_1, 0 )
	TAGKEYS( XK_2, 1 )
	TAGKEYS( XK_3, 2 )
	TAGKEYS( XK_4, 3 )
};
#+END_SRC

* Buttons
This section determines what to do when clicking on certain buttons on the status bar.

#+BEGIN_SRC C
/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
#+END_SRC
